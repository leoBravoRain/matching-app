{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/leo/Desktop/matchingApp/matching-app/src/screens/publicProfile/publicProfile.screen.js\";\nimport React from \"react\"; // import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n// material ui\n\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport { Button, Box } from \"@material-ui/core\";\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from \"@material-ui/core/CircularProgress\"; // import FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n// import LiveTv from '@material-ui/icons/LiveTv';\n\nimport { fs, auth } from \"../../libraries/firebase/firebase\"; // //  component\n// import WorkshopComponent from \"./components/workshop.component\";\n// import OverviewWorkshop from \"./components/overviewWorkshop.component\";\n// firebase\n// import { auth } from \"../../config/firebase\";\n// import { fs } from \"../../config/firebase\";\n\nclass PublicProfile extends React.Component {\n  // constructor\n  constructor(props) {\n    // constructur of parent\n    super(props); // initial states\n\n    this.state = {\n      loading: true,\n      userName: \"default\" // workshopsByCategory: null,\n      // garbagesPerDay: [],\n      // email: \"\",\n      // password: \"\",\n\n    };\n    this.likeToUser = this.likeToUser.bind(this);\n  }\n\n  componentDidMount() {\n    // get user name\n    fs.collection('users').doc(this.props.match.params.userId).get().then(doc => {\n      console.log(\"getting user name\");\n      console.log(doc.data());\n      this.setState({\n        loading: false,\n        userName: doc.data().exists ? doc.data().name : \"\"\n      });\n    }).catch(er => {\n      console.log(er);\n    });\n  }\n\n  likeToUser() {\n    // check if user is logged\n    auth.onAuthStateChanged(user => {\n      if (!user) {\n        console.log(\"user not logged\");\n        alert(\"You need an account (and login in) in our platform in order to 'give likes'\"); // this.props.history.push('/');\n        // console.log(\"aosjid\");\n      } else {\n        // if like user is different from logged user\n        if (user.uid != this.props.match.params.userId) {\n          const loggedUserRef = fs.collection(\"users\").doc(user.uid);\n          const likeUserRef = fs.collection(\"users\").doc(this.props.match.params.userId); // get logged user\n\n          loggedUserRef.get().then(doc_ => {\n            var loggedUser = doc_.data();\n            loggedUser[\"id\"] = doc_.id; // check if like already exists\n            // if it does not exists\n\n            if (!loggedUser.likesToUsers.includes(this.props.match.params.userId)) {\n              // add like to like user\n              loggedUser.likesToUsers.push(this.props.match.params.userId); // get user to give like\n\n              likeUserRef.get().then(doc => {\n                var likeUser = doc.data();\n                likeUser[\"id\"] = doc.id; // console.log(\"logged: \", doc_.id);\n                // console.log(\"like: \", doc.id);\n                // // test match\n                // likeUser.likesToUsers.push(doc_.id);\n                // loggedUser.likesToUsers.push(doc.id);\n                // // console.log(likeUser.likesToUsers);\n                // console.log(\"logged: \", loggedUser);\n                // console.log(\"like: \", likeUser);\n                // update likes of like user\n\n                if (!likeUser.likesFromUsers.includes(loggedUser.id)) {\n                  likeUser.likesFromUsers.push(loggedUser.id);\n                }\n\n                ; // check if match already exists\n\n                if (likeUser.matches.includes(loggedUser.id) & loggedUser.matches.includes(likeUser.id)) {\n                  alert(\"You already did match! Check your profile in order to start to speak!\");\n                } // if match does not exist yet\n                else {\n                    // check if users are both with likes (match)\n                    if (likeUser.likesToUsers.includes(loggedUser.id) & loggedUser.likesToUsers.includes(likeUser.id)) {\n                      // console.log(\"match\");\n                      // create match\n                      likeUser.matches.push(loggedUser.id);\n                      loggedUser.matches.push(likeUser.id); // user message\n\n                      alert(\"Congratulations! You did match! Go to your profile and start talking!\");\n                    } // do not match yet\n                    else {\n                        // usre message\n                        alert(\"Your like was saved, now you have to wait if the other person gives you like too! Good luck!\"); // console.log(\"other person don't like you\");\n                      }\n\n                    ;\n                  }\n\n                ; // update users on BD\n                // update logged user\n\n                loggedUserRef.update(loggedUser).then(res => {\n                  console.log(\"logged user updated successfully\");\n                }).catch(er => {\n                  console.log(er);\n                }); // update like user\n\n                likeUserRef.update(likeUser).then(res => {\n                  console.log(\"like user updated successfully\");\n                }).catch(er => {\n                  console.log(er);\n                });\n              });\n            } // if like already exists\n            else {\n                alert(\"You already liked this person. Must to wait until other person give you like!\");\n              }\n\n            ;\n          });\n        } // it's the same user\n        else {\n            alert(\"You can not do like to yourself\");\n          }\n\n        ;\n      }\n\n      ;\n    });\n  }\n\n  render() {\n    // return method\n    return /*#__PURE__*/_jsxDEV(Container, {\n      style: {// margin: 20,\n        // padding: 20,\n        // backgroundColor: \"red\",\n      },\n      children: !this.state.loading ? /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          style: {\n            margin: 15,\n            padding: 5\n          },\n          elevation: 5,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"h6\",\n            style: {\n              textAlign: \"center\"\n            },\n            children: [\"Hi! This is \", this.state.userName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"p\",\n            component: \"body2\",\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"You can give me \\\"like me\\\" if I like you :) If I gave you like too, so we will do match :) and we will be notified, otherwise I will never know you gave me like :), so don't worry about it!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => {\n              // alert(\"If I give you like too, we will do match, otherwise I will never know you gave me like :)\")\n              this.likeToUser();\n            },\n            children: \"Like me\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"p\",\n            component: \"body2\",\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"If you are not logged, click here:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => {\n              // alert(\"Go to register\");\n              // this.s\n              this.props.history.push('/');\n            },\n            children: \"Sign in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PublicProfile;","map":{"version":3,"sources":["/home/leo/Desktop/matchingApp/matching-app/src/screens/publicProfile/publicProfile.screen.js"],"names":["React","Paper","Container","Button","Box","Typography","CircularProgress","fs","auth","PublicProfile","Component","constructor","props","state","loading","userName","likeToUser","bind","componentDidMount","collection","doc","match","params","userId","get","then","console","log","data","setState","exists","name","catch","er","onAuthStateChanged","user","alert","uid","loggedUserRef","likeUserRef","doc_","loggedUser","id","likesToUsers","includes","push","likeUser","likesFromUsers","matches","update","res","render","margin","padding","textAlign","history"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n// material ui\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport { Button, Box } from \"@material-ui/core\";\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n// import FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n// import LiveTv from '@material-ui/icons/LiveTv';\n\nimport {\n    fs,\n    auth,\n} from \"../../libraries/firebase/firebase\";\n\n// //  component\n// import WorkshopComponent from \"./components/workshop.component\";\n// import OverviewWorkshop from \"./components/overviewWorkshop.component\";\n\n// firebase\n// import { auth } from \"../../config/firebase\";\n// import { fs } from \"../../config/firebase\";\n\n\nclass PublicProfile extends React.Component {\n\n    // constructor\n    constructor(props) {\n\n        // constructur of parent\n        super(props);\n\n        // initial states\n        this.state = {\n            loading: true,\n            userName: \"default\",\n            // workshopsByCategory: null,\n            // garbagesPerDay: [],\n            // email: \"\",\n            // password: \"\",\n        }\n        \n        this.likeToUser = this.likeToUser.bind(this);\n\n    }\n\n    componentDidMount() {\n\n        \n        // get user name\n        fs.collection('users').doc(this.props.match.params.userId)\n        .get().then(doc => {\n            \n            console.log(\"getting user name\");\n            console.log(doc.data());\n\n            this.setState({\n                loading: false,\n                userName: doc.data().exists ? doc.data().name : \"\",\n            });\n            \n        })\n        .catch(er => {\n            console.log(er);\n        });\n\n    }\n    \n    likeToUser() {\n        \n        // check if user is logged\n        auth.onAuthStateChanged((user) => {\n            \n            if (!user) {\n                \n                console.log(\"user not logged\");\n                \n                alert(\"You need an account (and login in) in our platform in order to 'give likes'\");\n                \n                // this.props.history.push('/');\n                \n                // console.log(\"aosjid\");\n                \n            }\n            \n            else {\n                \n                // if like user is different from logged user\n                if (user.uid != this.props.match.params.userId) {\n\n                    const loggedUserRef = fs.collection(\"users\").doc(user.uid);\n                    const likeUserRef = fs.collection(\"users\").doc(this.props.match.params.userId);\n                    \n                    // get logged user\n                    loggedUserRef.get()\n                    .then(doc_ => {\n                        \n                        var loggedUser = doc_.data();\n                        loggedUser[\"id\"] = doc_.id;\n                        \n                        // check if like already exists\n                        // if it does not exists\n                        if (!loggedUser.likesToUsers.includes(this.props.match.params.userId)) {\n                            \n                            // add like to like user\n                            loggedUser.likesToUsers.push(this.props.match.params.userId);\n                            \n                            // get user to give like\n                            likeUserRef.get()\n                            .then(doc => {\n                                \n                                var likeUser = doc.data();\n                                likeUser[\"id\"] = doc.id;\n                                \n                                // console.log(\"logged: \", doc_.id);\n                                // console.log(\"like: \", doc.id);\n                                \n                                // // test match\n                                // likeUser.likesToUsers.push(doc_.id);\n                                // loggedUser.likesToUsers.push(doc.id);\n                                \n                                // // console.log(likeUser.likesToUsers);\n                                // console.log(\"logged: \", loggedUser);\n                                // console.log(\"like: \", likeUser);\n                                \n                                // update likes of like user\n                                if (!likeUser.likesFromUsers.includes(loggedUser.id)) {\n                                    likeUser.likesFromUsers.push(loggedUser.id);\n                                };\n                                \n                                // check if match already exists\n                                if (likeUser.matches.includes(loggedUser.id) & loggedUser.matches.includes(likeUser.id)) {\n                                    \n                                    alert(\"You already did match! Check your profile in order to start to speak!\");\n                                    \n                                }\n                                \n                                // if match does not exist yet\n                                else {\n                                    \n                                    // check if users are both with likes (match)\n                                    if (likeUser.likesToUsers.includes(loggedUser.id) & loggedUser.likesToUsers.includes(likeUser.id)) {\n                                        // console.log(\"match\");\n                                        \n                                        // create match\n                                        likeUser.matches.push(loggedUser.id);\n                                        loggedUser.matches.push(likeUser.id);\n                                        \n                                        // user message\n                                        alert(\"Congratulations! You did match! Go to your profile and start talking!\");\n                                        \n                                    }\n                                    \n                                    // do not match yet\n                                    else {\n                                        \n                                        // usre message\n                                        alert(\"Your like was saved, now you have to wait if the other person gives you like too! Good luck!\");\n                                        // console.log(\"other person don't like you\");\n                                        \n                                    };\n                                    \n                                    \n                                };\n                                \n                                // update users on BD\n                                \n                                // update logged user\n                                loggedUserRef.update(loggedUser)\n                                .then(res => {\n                                    console.log(\"logged user updated successfully\");\n                                })\n                                .catch(er => {\n                                    console.log(er);\n                                });\n                                \n                                // update like user\n                                likeUserRef.update(likeUser)\n                                .then(res => {\n                                    console.log(\"like user updated successfully\");\n                                })\n                                .catch(er => {\n                                    console.log(er);\n                                });\n                                \n                            });\n                            \n                        }\n                        \n                        // if like already exists\n                        else{\n                            alert(\"You already liked this person. Must to wait until other person give you like!\");\n                        };\n                        \n                    });\n                    \n                }\n\n                // it's the same user\n                else {\n                    alert(\"You can not do like to yourself\");\n                };\n\n            };\n\n        });\n\n\n    }\n\n    render() {\n\n        // return method\n        return (\n\n            <Container\n                style={{\n                    // margin: 20,\n                    // padding: 20,\n                    // backgroundColor: \"red\",\n                }}\n            >\n\n                {\n                    !this.state.loading\n\n                        ?\n\n                        <Container>\n\n                            {/* title */}\n                            <Paper\n                                style={{\n                                    margin: 15,\n                                    padding: 5,\n                                }}\n\n                                elevation={5}\n                            >\n                                <Typography variant=\"h6\" component=\"h6\" style={{ textAlign: \"center\", }}>\n\n                                    Hi! This is {this.state.userName}\n\n                                </Typography>\n\n                                <Typography variant=\"p\" component=\"body2\" style={{ textAlign: \"center\", }}>\n\n                                    You can give me \"like me\" if I like you :) If I gave you like too, so we will do match :) and we will be notified, otherwise I will never know you gave me like :), so don't worry about it!\n\n                                </Typography>\n\n                                {/* like button */}\n                                <Button \n                                    variant=\"contained\" \n                                    color=\"primary\"\n                                    onClick={() => {\n                                        // alert(\"If I give you like too, we will do match, otherwise I will never know you gave me like :)\")\n                                        this.likeToUser();\n                                    }}\n                                >\n                                    Like me\n                                </Button>\n\n                                <Typography variant=\"p\" component=\"body2\" style={{ textAlign: \"center\", }}>\n\n                                    If you are not logged, click here:\n\n                                </Typography>\n                                \n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                        // alert(\"Go to register\");\n                                        // this.s\n                                        this.props.history.push('/');\n                                    }}\n                                >\n                                    Sign in\n                                </Button>\n\n                            </Paper>\n\n                        </Container>\n\n                        :\n\n                        <CircularProgress />\n\n                }\n\n            </Container>\n        );\n\n    }\n\n}\n\nexport default PublicProfile;"]},"metadata":{},"sourceType":"module"}