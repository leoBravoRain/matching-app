{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/leo/Desktop/matchingApp/matching-app/src/screens/publicProfile/publicProfile.screen.js\";\nimport React from \"react\"; // import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n// material ui\n\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport { Button, Box } from \"@material-ui/core\";\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from \"@material-ui/core/CircularProgress\"; // import FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n// import LiveTv from '@material-ui/icons/LiveTv';\n\nimport { fs, auth } from \"../../libraries/firebase/firebase\"; // //  component\n// import WorkshopComponent from \"./components/workshop.component\";\n// import OverviewWorkshop from \"./components/overviewWorkshop.component\";\n// firebase\n// import { auth } from \"../../config/firebase\";\n// import { fs } from \"../../config/firebase\";\n\nclass PublicProfile extends React.Component {\n  // constructor\n  constructor(props) {\n    // constructur of parent\n    super(props); // initial states\n\n    this.state = {\n      loading: true // workshopsByCategory: null,\n      // garbagesPerDay: [],\n      // email: \"\",\n      // password: \"\",\n\n    };\n    this.likeToUser = this.likeToUser.bind(this);\n  }\n\n  componentDidMount() {\n    // temp\n    this.setState({\n      loading: false // matchesWithUsers: matchesWithUsers,\n\n    }); // // check if user is logged\n    // auth.onAuthStateChanged((user) => {\n    //     if (!user) {\n    //         // console.log(\"user not logged\");\n    //         this.props.history.push('/');\n    //         // console.log(\"aosjid\");\n    //     }\n    //     else {\n    //         // console.log(\"user logged\");\n    //         // alert(\"user logged\");\n    //         // this.props.history.push('/login/');\n    //         // this.setState({\n    //         //     userId: user.uid,\n    //         // });\n    //         // get number of garbage\n    //         // fs.collection('oneGarbagePerDay').doc(this.state.userId).collection(\"oneGarbagePerDay\").\n    //         //     get().then(snapshotquery => {\n    //         //         // // get data from API\n    //         //         var garbages = [];\n    //         //         // iterate over each item\n    //         //         snapshotquery.forEach(doc => {\n    //         //             // console.log(doc.data());\n    //         //             let garbage = doc.data();\n    //         //             // store location\n    //         //             // loteo[\"location\"] = [loteo.location.latitude, loteo.location.longitude];\n    //         //             // garbage[\"id\"] = doc.id;\n    //         //             // add loteo to list\n    //         //             garbages.push(garbage);\n    //         //         });\n    //         //         // update state\n    //         //         this.setState({\n    //         //             // flag of getting data from API\n    //         //             get_garbages: true,\n    //         //             // update garbages\n    //         //             garbagesPerDay: garbages,\n    //         //             loading: false,\n    //         //         },\n    //         //             // () => {\n    //         //             //     console.log(this.state.garbages)\n    //         //             // }\n    //         //         );\n    //         //     });\n    //     }\n    // });\n  }\n\n  likeToUser() {\n    // check if user is logged\n    auth.onAuthStateChanged(user => {\n      if (!user) {\n        console.log(\"user not logged\");\n        alert(\"You need an account in our platform in order to 'give likes'\"); // this.props.history.push('/');\n        // console.log(\"aosjid\");\n      } else {\n        // get logged user\n        fs.collection(\"users\").doc(user.uid).get().then(doc_ => {\n          var loggedUser = doc_.data(); // get user to give like\n\n          fs.collection(\"users\").doc(this.props.match.params.userId).get().then(doc => {\n            var likeUser = doc.data();\n            console.log(loggedUser);\n            console.log(likeUser); // test\n\n            likeUser.likesToUsers.push(loggedUser.documentId);\n            loggedUser.likesToUsers.push(likeUser.documentId);\n            console.log(likeUser.likesToUsers); // check if users are both with likes (match)\n\n            if (loggedUser.uid in likeUser.likesToUsers & likeUser.uid in loggedUser.likesToUsers) {\n              console.log(\"match\");\n            } else {\n              console.log(\"other person don't like you\");\n            } // update users\n            // matches: if they did match\n            // likes form users: on both\n            // likes to Users: from the logged one\n\n          });\n        }); // update user to give like \n        // update logged user\n        // update matches on logged user\n      }\n    });\n    console.log(this.props.match.params.userId);\n  }\n\n  render() {\n    // return method\n    return /*#__PURE__*/_jsxDEV(Container, {\n      style: {// margin: 20,\n        // padding: 20,\n        // backgroundColor: \"red\",\n      },\n      children: !this.state.loading ? /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          style: {\n            margin: 15,\n            padding: 5\n          },\n          elevation: 5,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"h6\",\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"Hi!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"p\",\n            component: \"body2\",\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"You can give me \\\"like me\\\" if I like you :) If I gave you like too, so we will do match :) and we will be notified, otherwise I will never know you gave me like :), so don't worry about it!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => {\n              // alert(\"If I give you like too, we will do match, otherwise I will never know you gave me like :)\")\n              this.likeToUser();\n            },\n            children: \"Like me\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"p\",\n            component: \"body2\",\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"If you don't have an account yet, register here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: () => {\n              // alert(\"Go to register\");\n              // this.s\n              this.props.history.push('/register');\n            },\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PublicProfile;","map":{"version":3,"sources":["/home/leo/Desktop/matchingApp/matching-app/src/screens/publicProfile/publicProfile.screen.js"],"names":["React","Paper","Container","Button","Box","Typography","CircularProgress","fs","auth","PublicProfile","Component","constructor","props","state","loading","likeToUser","bind","componentDidMount","setState","onAuthStateChanged","user","console","log","alert","collection","doc","uid","get","then","doc_","loggedUser","data","match","params","userId","likeUser","likesToUsers","push","documentId","render","margin","padding","textAlign","history"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n// import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n// material ui\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport { Button, Box } from \"@material-ui/core\";\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n// import FavoriteBorder from '@material-ui/icons/FavoriteBorder';\n// import LiveTv from '@material-ui/icons/LiveTv';\n\nimport {\n    fs,\n    auth,\n} from \"../../libraries/firebase/firebase\";\n\n// //  component\n// import WorkshopComponent from \"./components/workshop.component\";\n// import OverviewWorkshop from \"./components/overviewWorkshop.component\";\n\n// firebase\n// import { auth } from \"../../config/firebase\";\n// import { fs } from \"../../config/firebase\";\n\n\nclass PublicProfile extends React.Component {\n\n    // constructor\n    constructor(props) {\n\n        // constructur of parent\n        super(props);\n\n        // initial states\n        this.state = {\n            loading: true,\n            // workshopsByCategory: null,\n            // garbagesPerDay: [],\n            // email: \"\",\n            // password: \"\",\n        }\n        \n        this.likeToUser = this.likeToUser.bind(this);\n\n    }\n\n    componentDidMount() {\n\n        // temp\n        this.setState({\n            loading: false,\n            // matchesWithUsers: matchesWithUsers,\n        });\n\n        // // check if user is logged\n        // auth.onAuthStateChanged((user) => {\n\n        //     if (!user) {\n\n        //         // console.log(\"user not logged\");\n\n        //         this.props.history.push('/');\n\n        //         // console.log(\"aosjid\");\n\n        //     }\n\n        //     else {\n\n        //         // console.log(\"user logged\");\n        //         // alert(\"user logged\");\n\n        //         // this.props.history.push('/login/');\n\n        //         // this.setState({\n        //         //     userId: user.uid,\n        //         // });\n\n        //         // get number of garbage\n        //         // fs.collection('oneGarbagePerDay').doc(this.state.userId).collection(\"oneGarbagePerDay\").\n        //         //     get().then(snapshotquery => {\n\n        //         //         // // get data from API\n        //         //         var garbages = [];\n\n        //         //         // iterate over each item\n        //         //         snapshotquery.forEach(doc => {\n\n        //         //             // console.log(doc.data());\n        //         //             let garbage = doc.data();\n        //         //             // store location\n        //         //             // loteo[\"location\"] = [loteo.location.latitude, loteo.location.longitude];\n        //         //             // garbage[\"id\"] = doc.id;\n        //         //             // add loteo to list\n        //         //             garbages.push(garbage);\n\n        //         //         });\n\n        //         //         // update state\n        //         //         this.setState({\n\n        //         //             // flag of getting data from API\n        //         //             get_garbages: true,\n        //         //             // update garbages\n        //         //             garbagesPerDay: garbages,\n\n        //         //             loading: false,\n\n        //         //         },\n\n        //         //             // () => {\n        //         //             //     console.log(this.state.garbages)\n        //         //             // }\n        //         //         );\n\n        //         //     });\n\n\n        //     }\n\n        // });\n\n    }\n    \n    likeToUser() {\n        \n        // check if user is logged\n        auth.onAuthStateChanged((user) => {\n            \n            if (!user) {\n                \n                console.log(\"user not logged\");\n                \n                alert(\"You need an account in our platform in order to 'give likes'\");\n                \n                // this.props.history.push('/');\n                \n                // console.log(\"aosjid\");\n                \n            }\n            \n            else {\n                \n                // get logged user\n                fs.collection(\"users\").doc(user.uid).get()\n                .then(doc_ => {\n\n                    var loggedUser = doc_.data();\n                    \n                    // get user to give like\n                    fs.collection(\"users\").doc(this.props.match.params.userId).get()\n                    .then(doc => {\n    \n                        var likeUser = doc.data();\n\n                        console.log(loggedUser);\n                        console.log(likeUser);\n                        \n                        // test\n                        likeUser.likesToUsers.push(loggedUser.documentId);\n                        loggedUser.likesToUsers.push(likeUser.documentId);\n                        \n                        console.log(likeUser.likesToUsers);\n\n                        // check if users are both with likes (match)\n                        if (loggedUser.uid in likeUser.likesToUsers & likeUser.uid in loggedUser.likesToUsers) {\n                            console.log(\"match\");\n                        }\n                        else {\n                            console.log(\"other person don't like you\");\n\n                            \n                        }\n\n                        // update users\n                        // matches: if they did match\n                        // likes form users: on both\n                        // likes to Users: from the logged one\n                    })\n\n\n                    \n                })\n                \n                // update user to give like \n               \n                // update logged user\n               \n                // update matches on logged user\n\n            }\n\n        });\n\n\n        console.log(this.props.match.params.userId);\n\n    }\n\n    render() {\n\n        // return method\n        return (\n\n            <Container\n                style={{\n                    // margin: 20,\n                    // padding: 20,\n                    // backgroundColor: \"red\",\n                }}\n            >\n\n                {\n                    !this.state.loading\n\n                        ?\n\n                        <Container>\n\n                            {/* title */}\n                            <Paper\n                                style={{\n                                    margin: 15,\n                                    padding: 5,\n                                }}\n\n                                elevation={5}\n                            >\n                                <Typography variant=\"h6\" component=\"h6\" style={{ textAlign: \"center\", }}>\n\n                                    Hi!\n\n                                </Typography>\n\n                                <Typography variant=\"p\" component=\"body2\" style={{ textAlign: \"center\", }}>\n\n                                    You can give me \"like me\" if I like you :) If I gave you like too, so we will do match :) and we will be notified, otherwise I will never know you gave me like :), so don't worry about it!\n\n                                </Typography>\n\n                                {/* like button */}\n                                <Button \n                                    variant=\"contained\" \n                                    color=\"primary\"\n                                    onClick={() => {\n                                        // alert(\"If I give you like too, we will do match, otherwise I will never know you gave me like :)\")\n                                        this.likeToUser();\n                                    }}\n                                >\n                                    Like me\n                                </Button>\n\n                                <Typography variant=\"p\" component=\"body2\" style={{ textAlign: \"center\", }}>\n\n                                    If you don't have an account yet, register here\n\n                                </Typography>\n                                \n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick={() => {\n                                        // alert(\"Go to register\");\n                                        // this.s\n                                        this.props.history.push('/register');\n                                    }}\n                                >\n                                    Register\n                                </Button>\n\n                            </Paper>\n\n                        </Container>\n\n                        :\n\n                        <CircularProgress />\n\n                }\n\n            </Container>\n        );\n\n    }\n\n}\n\nexport default PublicProfile;"]},"metadata":{},"sourceType":"module"}